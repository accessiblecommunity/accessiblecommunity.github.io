---
import { capitalize, isEmpty, toPairs } from 'lodash-es';
import { Icon } from 'astro-icon';


interface SocialLinkDictionary {
  [index: string]: URL;
};

interface LinkConfig {
  href: URL;
  icon: string;
  service: string;
  description: string;
  theme: string;
}

interface Props {
  links: SocialLinkDictionary,
  adjective?: string,
}

const { links, adjective = '' } = Astro.props;
const brandingThemes = {
  email: 'primary',
};

const socialLinks: Array<LinkConfig> = toPairs(
  links
).map(([type, url]) => {
  const icon = (() => {
    if (type == 'email')
      return 'envelope-at';
    else if (type == 'threads')
      return 'threads-logo-black'
    else
      return `cib:${type}`
  })();

  const href = type == 'email' ? `mailto:${url}` : url
  const service = type == 'linkedin' ? 'LinkedIn' : capitalize(type);
  const description = type == 'email' ? 'address' : 'profile';
  const theme = brandingThemes[type] ?? type;

  return {
    href,
    icon,
    service,
    description,
    theme,
  };
});

---

{ !isEmpty(socialLinks) && (
  <ul class="list-inline list-unstyled" aria-label="Social Media Link">
    { socialLinks.map((sl) =>
      <li class="list-inline-item">
        <a
          href={ sl.href }
          class:list={["icon-link align-text-top", `text-${sl.theme}`]}
          target="_blank"
          rel="noopener noreferrer"
        >
          <Icon
            name={ sl.icon }
            class="bi"
            role="img"
            aria-label={`${adjective} ${sl.service} ${sl.description}`}
          />
        </a>
      </li>
    )}
  </ul>
)}

<style>
  .icon-link > .bi {
    height: 1.25em;
    width: 1.25em;
  }
</style>
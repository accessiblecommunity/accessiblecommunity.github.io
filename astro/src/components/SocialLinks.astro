---
import { capitalize, isEmpty, toPairs } from "lodash-es";
import { Icon } from "astro-icon/components";

interface SocialLinkDictionary {
  [index: string]: URL;
}

interface LinkConfig {
  href: URL;
  icon: string;
  service: string;
  description: string;
  theme: string;
}

interface Props {
  links: SocialLinkDictionary;
  adjective?: string;
  gap?: number;
}

const { links, adjective = "" } = Astro.props;
const brandingThemes = {
  email: "primary",
};

const socialLinks: Array<LinkConfig> = toPairs(links).map(([type, url]) => {
  const icon = (() => {
    if (type == "email") return "envelope-at";
    else if (type == "threads") return "threads-logo-black";
    else return `cib:${type}`;
  })();

  const href = type == "email" ? `mailto:${url}` : url;
  const service = type == "linkedin" ? "LinkedIn" : capitalize(type);
  const description = type == "email" ? "address" : "profile";
  const theme = brandingThemes[type] ?? type;

  return {
    href,
    icon,
    service,
    description,
    theme,
  };
});
---

{
  !isEmpty(socialLinks) && (
    <ul
      class="list-unstyled"
      aria-label={`${adjective} Communications and Social Media Links`}
    >
      {socialLinks.map((sl) => (
        <li class="d-inline">
          <a
            href={sl.href}
            class:list={["align-text-top", `text-${sl.theme}`]}
            target="_blank"
            rel="noopener noreferrer"
          >
            <Icon
              name={sl.icon}
              class="bi social-icon"
              height="29"
              width="29"
              role="img"
              aria-label={`${adjective} ${sl.service} ${sl.description}`}
            />
          </a>
        </li>
      ))}
    </ul>
  )
}

<style>
  .social-icon {
    margin-bottom: 14.5px;
    margin-inline: 14.5px;
  }
</style>

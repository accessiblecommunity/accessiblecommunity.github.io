---
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";
import { Icon } from "astro-icon/components";

type MemberProp = string | NonNullable<CollectionEntry<"staff">>;
type TeamMemberData = CollectionEntry<"staff">["data"];

interface Props {
  member: MemberProp;
  role?: string | boolean;
  element?: string;
  left?: boolean;
  highlightName?: boolean;
  firstNameOnly?: boolean;
  branded?: boolean;
  size?: string;
  valign?: string;
  responsive?: boolean;
  showLinks?: boolean;
}

interface Names {
  first: string;
  middle?: string
  last?: string;
}

const {
  member,
  role = true,
  highlightName = false,
  firstNameOnly = false,
  left = true,
  branded = false,
  valign = "start",
  element = "div",
  size = "",
  responsive = false,
  showLinks = false,
} = Astro.props;

async function getTeamMemberData(member: MemberProp): Promise<TeamMemberData> {
  if (typeof member === "string") {
    const memberEntry = await getEntry("staff", member);
    if (typeof memberEntry === "undefined")
      throw new Error("`member` is undefined");
    return memberEntry.data;
  }
  return member.data;
}

const memberData: TeamMemberData = await getTeamMemberData(member);
const { name, cited, roles, photo, links } = memberData;
const teamName = typeof role === "boolean" ? "default" : role;
const title = role && roles[teamName];

function getDisplayName({ first, middle, last }: Names) {
  if (highlightName) first = `<strong>${first}</strong>`;
  if (firstNameOnly) return first;
  return [first, middle, last].filter((n) => n).join(" ");
}

function getLinkIcon(linkType: string) {
  const iconMap: Record<string, string> = {
    email: "bi:envelope-at-fill",
    linkedin: "bi:linkedin",
    twitter: "bi:twitter-x",
    website: "bi:globe",
    phone: "bi:telephone-fill",
    facebook: "bi:facebook",
    instagram: "bi:instagram",
    youtube: "bi:youtube",
  };
  return iconMap[linkType] || "bi:link-45deg";
}

function formatLinkUrl(linkType: string, value: string) {
  if (linkType === "email" && !value.startsWith("mailto:")) {
    return `mailto:${value}`;
  }
  if (linkType === "phone" && !value.startsWith("tel:")) {
    return `tel:${value}`;
  }
  return value;
}

const displayName = getDisplayName(cited || name);
const NameTag = element;
---

<div
  class:list={[
    "vignette",
    size && `vignette-${size}`,
    responsive && "vignette-resp",
    "d-inline-flex",
    left ? "flex-row-reverse" : "justify-content-end",
    `align-items-${valign}`,
    `gap-1`,
    // `gap-${size == "lg" ? "2" : "1"}`,
  ]}
>
  <div
    class:list={[
      "flex-fill text-start me-2 me-sm-1 me-md-0",
      branded && "text-brand",
    ]}
  >
    {
      title ?
        <>
          <NameTag class="vignette-name" set:html={displayName} />
          <div class="vignette-title" set:html={title} />
        </>
      : <NameTag
          class="vignette-name justify-content-center"
          set:html={displayName}
        />
    }

    {/* Conditionally render bio links */}
    {
      showLinks && links && Object.keys(links).length > 0 && (
        <div class="vignette-links mt-2">
          {Object.entries(links).map(([linkType, linkValue]) => (
            <a
              href={formatLinkUrl(linkType, linkValue)}
              class="vignette-link"
              title={`${memberData.name}'s ${linkType}`}
              target={
                linkType !== "email" && linkType !== "phone" ?
                  "_blank"
                : undefined
              }
              rel={
                linkType !== "email" && linkType !== "phone" ?
                  "noopener noreferrer"
                : undefined
              }
            >
              <Icon name={getLinkIcon(linkType)} class="vignette-link-icon" />
              <span class="visually-hidden">{linkType}</span>
            </a>
          ))}
        </div>
      )
    }
  </div>
  <img
    class:list={[
      "vignette-pic rounded-circle rounded-top-0",
      responsive && "d-none d-sm-block",
    ]}
    src={photo.image.src}
    alt={photo.alt || ""}
  />
</div>

<style is:global lang="scss">
  @import "bootstrap/scss/functions";
  @import "bootstrap/scss/variables";
  @import "bootstrap/scss/mixins/breakpoints";

  .vignette-name {
    margin-bottom: 0;
  }
  .vignette-title {
    color: var(--bs-secondary-color);
    font-size: 75%;
    margin-bottom: 0.25rem;
  }
  .vignette-links {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }
  .vignette-link {
    display: inline-flex;
    align-items: center;
    text-decoration: none;
  }
  .vignette-link-icon {
    width: 1.35rem;
    height: 1.35rem;
    fill: currentColor;
  }
  .blockquote-footer .vignette-title {
    font-size: 0.9rem;
  }
  .blockquote-footer .vignette-name,
  .blockquote-footer .vignette-title {
    color: inherit;
  }
  .blockquote-footer .vignette-title,
  .vignette-resp .vignette-title,
  .vignette-lg .vignette-title {
    line-height: 80%;
    margin-bottom: 0.1em;
  }
  .vignette .vignette-pic {
    height: 3.5rem;
  }
  .vignette-lg .vignette-pic {
    height: 5rem;
  }
  @include media-breakpoint-up(md) {
    .vignette-resp .vignette-pic {
      height: 5rem;
    }
  }
</style>

---
import { getImage } from "astro:assets";
import type { ImageMetadata } from "astro";

interface Props {
  image: string | ImageMetadata;
  theme?: string;
  actionBreakpoint: string;
}

const {
  image,
  theme = "primary",
  actionBreakpoint = "lg",
} = Astro.props;

let heroBgUrl;

if (image) {
  const optimizedBg = await getImage({ src: image, format: "avif" });
  heroBgUrl = `url(${optimizedBg.src})`;
} else {
  heroBgUrl = "";
}
---

<section class="container-fluid">
  <div class="d-flex flex-column flex-md-row align-items-stretch gap-2">
    <div class="col col-md-7 col-xl-6 p-5">
      <slot name="heading" />
      <div class="text-primary-emphasis mx-2">
        <slot />
      </div>
      {
        Astro.slots.has("action-bar") && (
          <div class="bg-primary bg-opacity-50 py-3 text-white">
            <div
              class={`d-flex flex-column flex-${actionBreakpoint}-row align-items-center justify-content-${actionBreakpoint}-evenly gap-2`}
            >
              <slot name="action-bar" />
            </div>
          </div>
        )
      }
    </div>
    <div
      class={`d-none d-md-block col-md-5 col-xl-6 bg-${theme} rounded-img`}
      style={`background: no-repeat center ${heroBgUrl}; background-size: cover; background-position: 22% center`}
    >
    </div>
  </div>
  {
    Astro.slots.has("prologue") && (
      <div class="bg-primary bg-opacity-50 py-2">
        <div class="container-fluid mx-auto text-white text-center">
          <slot name="prologue" />
        </div>
      </div>
    )
  }
</section>

<style>
  .rounded-img {
    border-top-left-radius: 8rem 14rem;
    border-bottom-left-radius: 8em 14em;
  }

  .hero .text-bg-hero {
    background-color: rgba(var(--bs-primary-rgb), var(--bs-bg-opacity));
    border-radius: var(--bs-border-radius-sm);
    --bs-bg-opacity: 0.25;
    padding: 0.25rem 0.5rem; /* py-1 px-2 */
  }
</style>

---
import { getOpenGraphImageData } from "@lib/og-image";
import type { Breadcrumbs, PageMetadata } from "@lib/types";

const title = "Purchase - The Accessible Escape Room";
const metadata: PageMetadata = {
  title,
  description: "Purchase your accessible escape room kit",
  image: getOpenGraphImageData(Astro.site, "pages", "escape-room-purchase"),
};
const crumbs: Breadcrumbs = [
  { name: "Home", href: "/" },
  { name: "Services", href: "/services" },
  { name: "Escape Room", href: "/services/escape-room" },
];

import Branding from "@components/Branding.astro";
import Layout from "src/layouts/Layout.astro";
import ThemedBox from "@components/ThemedBox.astro";
import ThemedSection from "@components/ThemedSection.astro";
import { Icon } from "astro-icon/components";
---

<Layout {title} {crumbs} {metadata}>
  <div class="container-fluid bg-primary text-white py-5 d-flex flex-column" slot="header">
    <div class="container">
      <div class="row justify-content-center">
        <div class="col-lg-8 text-center">
          <h1 class="display-3 mb-3">
            Purchase Your <Branding>Accessible Escape Room</Branding>
          </h1>
          <p class="lead">
            Lorem ipsum dolor sit amet, consectetur adipiscing elit.
          </p>
        </div>
      </div>
    </div>
  </div>

  <!-- Purchase Section -->
  <ThemedSection style="tertiary">
    <div class="row justify-content-center">
      <div class="col-lg-8">
        <div class="text-center mb-5">
          <h2 class="display-4 mb-3">Purchase Options</h2>
          <p class="lead">
            Select your kit type and theme below
          </p>
        </div>

        <!-- Purchase Form -->
        <div class="card shadow-lg border-0 mb-5">
          <div class="card-header bg-primary text-white text-center">
            <h4 class="mb-0">Purchase Information</h4>
          </div>
          <div class="card-body">
            <form id="purchase-form" novalidate>

              <!-- Kit Type Selection -->
              <fieldset class="mb-4">
                <legend class="h5">Kit Type *</legend>
                <div class="form-check mb-2">
                  <input class="form-check-input" type="radio" name="kitType" id="kit-build" value="build" required>
                  <label class="form-check-label" for="kit-build">
                    Build-your-own Kit — <span class="fw-bold">$500</span>
                  </label>
                </div>
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="kitType" id="kit-ready" value="ready" required>
                  <label class="form-check-label" for="kit-ready">
                    Ready-made Kit — <span class="fw-bold">$3,500</span>
                  </label>
                </div>
                <div id="kitType-error" class="invalid-feedback" role="alert"></div>
              </fieldset>

              <!-- Theme Selection -->
              <fieldset class="mb-4">
                <legend class="h5">Choose Your Theme *</legend>
                <div class="row gy-3">
                  <div class="col-sm-6">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" name="theme" id="corporate" value="corporate" required>
                      <label class="form-check-label" for="corporate">
                        <strong>Corporate Conundrum</strong><br>
                        <small>Retrieve missing ground-breaking technology from your company</small>
                      </label>
                    </div>
                  </div>
                  <div class="col-sm-6">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" name="theme" id="baking" value="baking" required>
                      <label class="form-check-label" for="baking">
                        <strong>Baking Bonanza</strong><br>
                        <small>Find classic recipes to win the blue ribbon at the local fair</small>
                      </label>
                    </div>
                  </div>
                  <div class="col-sm-6">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" name="theme" id="picnic" value="picnic" required>
                      <label class="form-check-label" for="picnic">
                        <strong>Puzzling Picnic</strong><br>
                        <small>Setup a challenging picnic before your friend arrives</small>
                      </label>
                    </div>
                  </div>
                  <div class="col-sm-6">
                    <div class="form-check">
                      <input class="form-check-input" type="radio" name="theme" id="casino" value="casino" required>
                      <label class="form-check-label" for="casino">
                        <strong>Cryptic Casino</strong><br>
                        <small>Play games and collect chips to access the high roller vault</small>
                      </label>
                    </div>
                  </div>
                </div>
                <div id="theme-error" class="invalid-feedback" role="alert"></div>
              </fieldset>

              <!-- Contact & Organization -->
              <div class="row">
                <div class="col-md-6 mb-3">
                  <label for="organization" class="form-label">
                    Organization Name *
                  </label>
                  <input type="text" id="organization" name="organization" class="form-control" required aria-describedby="organization-error" autocomplete="organization">
                  <div id="organization-error" class="invalid-feedback" role="alert"></div>
                </div>
                <div class="col-md-6 mb-3">
                  <label for="contact-name" class="form-label">
                    Contact Name *
                  </label>
                  <input type="text" id="contact-name" name="contactName" class="form-control" required aria-describedby="contact-name-error" autocomplete="name">
                  <div id="contact-name-error" class="invalid-feedback" role="alert"></div>
                </div>
              </div>

              <!-- Email -->
              <div class="mb-3">
                <label for="email" class="form-label">
                  Email *
                </label>
                <input type="email" id="email" name="email" class="form-control" required aria-describedby="email-error" autocomplete="email">
                <div id="email-error" class="invalid-feedback" role="alert"></div>
              </div>

              <!-- Special Requirements -->
              <div class="mb-4">
                <label for="special-requirements" class="form-label">Special Requirements</label>
                <textarea id="special-requirements" name="specialRequirements" class="form-control" rows="3" placeholder="Any specific accessibility needs, customizations, or special requirements for your escape room kit" aria-describedby="special-requirements-help"></textarea>
                <div id="special-requirements-help" class="form-text">
                  Optional: Any specific needs or customizations for accessibility
                </div>
              </div>

              <div class="text-center">
                <button type="submit" class="btn btn-primary btn-lg px-5" id="checkout-button">
                  Purchase
                </button>
              </div>
            </form>

            <!-- Stripe Embedded Checkout -->
            <div id="checkout-container" style="display: none;">
              <div id="checkout"></div>
            </div>
            <div id="payment-messages" class="mt-3" role="alert" aria-live="polite"></div>
          </div>
        </div>
      </div>
    </div>
  </ThemedSection>

  <!-- Ready-Made Kit Coming Soon Section -->
  <ThemedSection theme="secondary">
    <div class="text-center text-white">
      <h2 class="display-4 mb-4">Ready-Made Kits</h2>
      <p class="lead mb-4">Our pre-assembled escape rooms will be available later this year</p>
      
      <div class="row justify-content-center">
        <div class="col-lg-8">
          <div class="card border-light bg-transparent">
            <div class="card-body">
              <h3 class="card-title text-white mb-3">Coming Soon</h3>
              <p class="text-white mb-4">
                Pre-assembled escape rooms with higher technology and automation.
                Perfect for organizations wanting a ready-to-go solution.
              </p>
              <div class="display-5 text-brand fw-bold mb-3">$3,500</div>
              <p class="text-white-50 mb-4">Available later this year</p>
              <a 
                href="mailto:escaperoom@accessiblecommunity.org" 
                class="btn btn-outline-light btn-lg"
                aria-describedby="ready-made-info"
              >
                Get Notified
              </a>
              <div id="ready-made-info" class="mt-2 text-white-75 small">
                Email us to be notified when ready-made kits become available
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </ThemedSection>

  <!-- Stripe Script -->
  <script src="https://js.stripe.com/v3/"></script>

  <!-- Form Handling Script -->
  <script>
    // Environment variables
    const STRIPE_PUBLISHABLE_KEY = import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY;

    // Global variables
    let stripe;
    let elements;
    let embeddedCheckout;

    document.addEventListener('DOMContentLoaded', async function() {
      if (!STRIPE_PUBLISHABLE_KEY) {
        console.error('Stripe publishable key not found');
        showError('Payment system not configured');
        return;
      }

      // Initialize Stripe
      stripe = Stripe(STRIPE_PUBLISHABLE_KEY);

      const form = document.getElementById('purchase-form');
      const checkoutButton = document.getElementById('checkout-button');
      const checkoutContainer = document.getElementById('checkout-container');
      const paymentMessages = document.getElementById('payment-messages');
      
      if (!form || !checkoutButton) {
        console.error('Required form elements not found');
        return;
      }

      // Form submission handler
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Clear previous messages
        paymentMessages.innerHTML = '';
        
        // Validate form
        if (!validateForm()) {
          return;
        }

        // Get form data
        const formData = new FormData(form);
        const purchaseData = Object.fromEntries(formData);
        
        // Disable submit button
        checkoutButton.disabled = true;
        checkoutButton.textContent = 'Processing...';

        try {
          await initializeEmbeddedCheckout(purchaseData);
        } catch (error) {
          console.error('Purchase processing failed:', error);
          showError('Failed to process purchase. Please try again.');
          
          // Re-enable button
          checkoutButton.disabled = false;
          checkoutButton.textContent = 'Purchase';
        }
      });

      async function initializeEmbeddedCheckout(purchaseData) {
        try {
          // Create checkout session
          const response = await fetch('/api/create-checkout-session', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(purchaseData)
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to create checkout session');
          }

          const { clientSecret } = await response.json();
          
          // Hide form and show checkout
          form.style.display = 'none';
          checkoutContainer.style.display = 'block';

          // Initialize embedded checkout
          const checkout = await stripe.initEmbeddedCheckout({
            clientSecret: clientSecret,
          });

          // Mount the embedded checkout
          checkout.mount('#checkout');

        } catch (error) {
          console.error('Embedded checkout error:', error);
          throw error;
        }
      }

      // Form validation
      function validateForm() {
        let isValid = true;
        
        // Clear previous errors
        document.querySelectorAll('.invalid-feedback').forEach(el => {
          el.textContent = '';
          el.style.display = 'none';
        });
        document.querySelectorAll('.form-control, .form-check-input').forEach(el => {
          el.classList.remove('is-invalid');
        });

        // Kit type validation
        const kitType = document.querySelector('input[name="kitType"]:checked');
        if (!kitType) {
          showFieldError('kitType-error', 'Please select a kit type');
          isValid = false;
        }

        // Theme validation
        const theme = document.querySelector('input[name="theme"]:checked');
        if (!theme) {
          showFieldError('theme-error', 'Please select a theme');
          isValid = false;
        }

        // Organization validation
        const organization = document.getElementById('organization');
        if (!organization.value.trim()) {
          showFieldError('organization-error', 'Organization name is required');
          organization.classList.add('is-invalid');
          isValid = false;
        }

        // Contact name validation
        const contactName = document.getElementById('contact-name');
        if (!contactName.value.trim()) {
          showFieldError('contact-name-error', 'Contact name is required');
          contactName.classList.add('is-invalid');
          isValid = false;
        }

        // Email validation
        const email = document.getElementById('email');
        if (!email.value.trim()) {
          showFieldError('email-error', 'Email is required');
          email.classList.add('is-invalid');
          isValid = false;
        } else if (!isValidEmail(email.value)) {
          showFieldError('email-error', 'Please enter a valid email address');
          email.classList.add('is-invalid');
          isValid = false;
        }

        return isValid;
      }

      function showFieldError(errorId, message) {
        const errorElement = document.getElementById(errorId);
        if (errorElement) {
          errorElement.textContent = message;
          errorElement.style.display = 'block';
        }
      }

      function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      }

      function showError(message) {
        paymentMessages.innerHTML = `
          <div class="alert alert-danger" role="alert">
            ${message}
          </div>
        `;
      }

      function showSuccess(message) {
        paymentMessages.innerHTML = `
          <div class="alert alert-success" role="alert">
            ${message}
          </div>
        `;
      }
    });
  </script>
</Layout>